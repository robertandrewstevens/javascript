Eloquent JavaScriptA Modern Introduction to ProgrammingMarijn Haverbeke
Copyright © 2014 by Marijn HaverbekeThis work is licensed under a Creative Commons attribution-noncommercial license (http://creativecommons.org/licenses/by-nc/3.0/). All code in the book may also be considered licensed under an MIT license (http:// opensource.org/licenses/MIT).The illustrations are contributed by various artists: Cover by Wasif Hyder. Computer (introduction) and unicycle people (Chapter 21) by Max Xiantu. Sea of bits (Chapter 1) and weresquirrel (Chapter 4) by Margarita Martínez and José Menor. Octopuses (Chapter 2 and 4) by Jim Tierney. Object with on/off switch (Chapter 6) by Dyle MacGregor. Regular expression diagrams in Chapter 9 generated with regexper.com by Jeff Avallone. Game concept for Chapter 15 by Thomas Palef. Pixel art in Chapter 16 by Antonio Perdomo Pastor.The second edition of Eloquent JavaScript was made possible by 454 financial backers.You can buy a print version of this book, with an extra bonus chapter included, printed by No Starch Press at http://www.amazon.com/gp/product/ 1593275846/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN= 1593275846&linkCode=as2&tag=marijhaver-20&linkId=VPXXXSRYC5COG5R5.i
ContentsOnprogramming .......................... 2 Whylanguagematters ....................... 4WhatisJavaScript?. . . . . . . Code, and what to do with it . Overviewofthisbook. . . . . . Typographic conventions . . . .1 Values, Types, and Operators.................. 7 .................. 8 .................. 9 .................. 1011Values............... .................. 11 Numbers ............................... 12 Strings ................................ 15 Unaryoperators........................... 16 Booleanvalues............................ 17 Undefinedvalues........................... 19 Automatictypeconversion..................... 19 Summary............................... 222 Program Structure 23Expressionsandstatements .................... 23 Variables ............................... 24 Keywordsandreservedwords ................... 26 Theenvironment .......................... 27 Functions............................... 27 Theconsole.logfunction ...................... 28 Returnvalues ............................ 28 promptandconfirm......................... 29 Controlflow ............................. 30 Conditionalexecution........................ 30 whileanddoloops.......................... 32 IndentingCode ........................... 34ii
forloops ............................... 35 BreakingOutofaLoop ...................... 36 Updatingvariablessuccinctly ................... 36 Dispatchingonavaluewithswitch ................ 37 Capitalization ............................ 38 Comments .............................. 38 Summary............................... 39 Exercises ............................... 403 Functions 42Definingafunction ......................... 42 Parametersandscopes ....................... 43 Nestedscope............................. 45 Functionsasvalues ......................... 46 Declarationnotation ........................ 47 Thecallstack ............................ 48 OptionalArguments......................... 49 Closure................................ 50 Recursion............................... 52 Growingfunctions.......................... 55 Functionsandsideeffects ..................... 58 Summary............................... 58 Exercises ............................... 594 Data Structures: Objects and Arrays 61Theweresquirrel........................... 61 Datasets............................... 62 Properties .............................. 63 Methods ............................... 64 Objects................................ 65 Mutability .............................. 68 Thelycanthrope’slog........................ 69 Computingcorrelation ....................... 71 Objectsasmaps........................... 73 Thefinalanalysis .......................... 74 Furtherarrayology.......................... 76 Stringsandtheirproperties .................... 78iii
Theargumentsobject........................ 79 TheMathobject........................... 80 Theglobalobject .......................... 82 Summary............................... 82 Exercises ............................... 835 Higher-Order Functions 86Abstraction.............................. 87 Abstractingarraytraversal..................... 88 Higher-orderfunctions ....................... 90 Passingalongarguments ...................... 91 JSON................................. 92 Filteringanarray .......................... 94 Transformingwithmap....................... 95 Summarizingwithreduce...................... 95 Composability ............................ 96 Thecost ............................... 98 Great-great-great-great-......................... 99 Binding................................ 102 Summary............................... 102 Exercises ............................... 1036 The Secret Life of Objects 105History ................................ 105 Methods ............................... 107 Prototypes .............................. 108 Constructors............................. 109 Overridingderivedproperties ................... 110 Prototypeinterference ....................... 112 Prototype-lessobjects........................ 114 Polymorphism ............................ 115 Layingoutatable.......................... 115 Gettersandsetters ......................... 121 Inheritance.............................. 122 Theinstanceofoperator....................... 124 Summary............................... 125 Exercises ............................... 126iv
7 Project: Electronic Life 128Definition............................... 128 Representingspace ......................... 129 Acritter’sprogramminginterface................. 131 Theworldobject .......................... 132 thisanditsscope .......................... 134 Animatinglife ............................ 136 Itmoves ............................... 139 Morelifeforms............................ 140 Amorelifelikesimulation ..................... 141 Actionhandlers ........................... 142 Populatingthenewworld ..................... 144 Bringingittolife .......................... 145 Exercises ............................... 1478 Bugs and Error Handling 149Programmermistakes........................ 149 Strictmode.............................. 150 Testing ................................ 151 Debugging .............................. 153 Errorpropagation.......................... 154 Exceptions .............................. 156 Cleaningupafterexceptions.................... 157 Selectivecatching .......................... 159 Assertions .............................. 161 Summary............................... 162 Exercises ............................... 1639 Regular Expressions 164Creatingaregularexpression ................... 164 Testingformatches ......................... 165 Matchingasetofcharacters.................... 165 Repeatingpartsofapattern.................... 167 Groupingsubexpressions ...................... 168 Matchesandgroups......................... 168 Thedatetype ............................ 170 Wordandstringboundaries .................... 171v
Choicepatterns ........................... 172 Themechanicsofmatching .................... 172 Backtracking............................. 174 Thereplacemethod......................... 176 Greed................................. 177 DynamicallycreatingRegExpobjects . . . . . . . . . . . . . . 179 Thesearchmethod ......................... 180 ThelastIndexproperty....................... 180 ParsinganINIfile.......................... 182 Internationalcharacters....................... 184 Summary............................... 185 Exercises ............................... 18610 Modules 188Whymoduleshelp.......................... 188 Usingfunctionsasnamespaces................... 191 Objectsasinterfaces ........................ 192 Detachingfromtheglobalscope.................. 193 Evaluatingdataascode ...................... 194 Require................................ 195 Slow-loadingmodules........................ 197 Interfacedesign ........................... 200 Summary............................... 202 Exercises ............................... 20311 Project: A Programming Language 205Parsing ................................ 205 Theevaluator ............................ 210 Specialforms............................. 211 Theenvironment .......................... 213 Functions............................... 215 Compilation ............................. 216 Cheating ............................... 217 Exercises ............................... 21812 JavaScript and the Browser 220NetworksandtheInternet ..................... 220vi
The Web . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 HTML ................................ 223 HTMLandJavaScript ....................... 225 Inthesandbox............................ 226 Compatibilityandthebrowserwars ............... 22713 The Document Object Model 229Documentstructure......................... 229 Trees ................................. 230 Thestandard............................. 232 Movingthroughthetree ...................... 233 Findingelements .......................... 234 Changingthedocument ...................... 235 Creatingnodes............................ 236 Attributes .............................. 238 Layout ................................ 240 Styling ................................ 242 Cascadingstyles........................... 244 Queryselectors............................ 245 Positioningandanimating ..................... 246 Summary............................... 249 Exercises ............................... 24914 Handling Events 252Eventhandlers............................ 252 EventsandDOMnodes ...................... 253 Eventobjects............................. 254 Propagation ............................. 254 Defaultactions............................ 256 Keyevents .............................. 257 Mouseclicks ............................. 259 Mousemotion ............................ 260 Scrollevents ............................. 262 Focusevents ............................. 264 Loadevent.............................. 265 Scriptexecutiontimeline...................... 266 Settingtimers ............................ 267vii
Debouncing.............................. 268 Summary............................... 269 Exercises ............................... 27015 Project: A Platform Game 272Thegame............................... 272 Thetechnology ........................... 273 Levels................................. 274 Readingalevel............................ 275 Actors................................. 276 Encapsulationasaburden..................... 279 Drawing................................ 280 Motionandcollision......................... 285 Actorsandactions.......................... 288 Trackingkeys ............................ 292 Runningthegame.......................... 293 Exercises ............................... 29516 Drawing on Canvas 297SVG.................................. 297 Thecanvaselement ......................... 298 Fillingandstroking......................... 300 Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301 Curves ................................ 302 Drawingapiechart......................... 306 Text.................................. 307 Images ................................ 308 Transformation ........................... 310 Storingandclearingtransformations . . . . . . . . . . . . . . . 313 Backtothegame .......................... 314 Choosingagraphicsinterface ................... 320 Summary............................... 321 Exercises ............................... 32217 HTTP 324Theprotocol............................. 324 BrowsersandHTTP ........................ 326viii
XMLHttpRequest .......................... 328 Sendingarequest .......................... 328 AsynchronousRequests....................... 330 FetchingXMLData......................... 330 HTTPsandboxing.......................... 331 Abstractingrequests ........................ 332 Promises ............................... 335 AppreciatingHTTP......................... 338 SecurityandHTTPS ........................ 338 Summary............................... 339 Exercises ............................... 34018 Forms and Form Fields 342Fields................................. 342 Focus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344 Disabledfields ............................ 345 Theformasawhole ........................ 345 Textfields .............................. 347 Checkboxesandradiobuttons................... 348 Selectfields.............................. 349 Filefields............................... 351 Storingdataclient-side....................... 353 Summary............................... 356 Exercises ............................... 35719 Project: A Paint Program 359Implementation ........................... 360 BuildingtheDOM ......................... 360 Thefoundation ........................... 361 Toolselection ............................ 362 Colorandbrushsize ........................ 365 Saving................................. 367 Loadingimagefiles ......................... 368 Finishingup ............................. 370 Exercises ............................... 372ix
20 Node.js 376Background.............................. 376 Asynchronicity............................ 377 Thenodecommand......................... 378 Modules................................ 380 InstallingwithNPM ........................ 381 Thefilesystemmodule....................... 382 TheHTTPmodule ......................... 384 Streams................................ 386 Asimplefileserver ......................... 388 Errorhandling............................ 393 Summary............................... 395 Exercises ............................... 39521 Project: Skill-Sharing Website 399Design................................. 400 Longpolling ............................. 401 HTTPinterface ........................... 402 Theserver .............................. 404 Theclient............................... 413 Exercises ............................... 421 ProgramStructure ......................... 424 Functions............................... 425 DataStructures:ObjectsandArrays............... 426 Higher-OrderFunctions....................... 428 TheSecretLifeofObjects ..................... 429 Project:ElectronicLife....................... 430 BugsandErrorHandling...................... 432 RegularExpressions......................... 432 Modules................................ 433 Project:AProgrammingLanguage................ 435 TheDocumentObjectModel ................... 436 HandlingEvents........................... 437 Project:APlatformGame..................... 438 DrawingonCanvas ......................... 439 HTTP................................. 441 FormsandFormFields....................... 442x
Project:APaintProgram ..................... 444 Node.js ................................ 446 Project:Skill-SharingWebsite................... 448xi
IntroductionThis is a book about getting computers to do what you want them to do. Computers are about as common as screwdrivers today, but they contain a lot more hidden complexity and thus are harder to operate and understand. To many, they remain alien, slightly threatening things.We’ve found two effective ways of bridging the communication gap be- tween us, squishy biological organisms with a talent for social and spatial reasoning, and computers, unfeeling manipulators of meaningless data. The first is to appeal to our sense of the physical world and build in- terfaces that mimic that world and allow us to manipulate shapes on a screen with our fingers. This works very well for casual machine inter- action.But we have not yet found a good way to use the point-and-click ap- proach to communicate things to the computer that the designer of the interface did not anticipate. For open-ended interfaces, such as instruct- ing the computer to perform arbitrary tasks, we’ve had more luck with an approach that makes use of our talent for language: teaching the machine a language.Human languages allow words and phrases to be combined in many ways, allowing us to say many different things. Computer languages, though typically less grammatically flexible, follow a similar principle.1
Casual computing has become much more widespread in the past 20 years, and language-based interfaces, which once were the default way in which people interacted with computers, have largely been replaced with graphical interfaces. But they are still there, if you know where to look. One such language, JavaScript, is built into just about every web browser and is thus available on just about every consumer device.This book intends to make you familiar enough with this language to be able to make a computer do what you want.On programmingI do not enlighten those who are not eager to learn, nor arouse those who are not anxious to give an explanation themselves. If I have presented one corner of the square and they cannot come back to me with the other three, I should not go over the points again.—ConfuciusBesides explaining JavaScript, I also will introduce the basic principles of programming. Programming, it turns out, is hard. The fundamental rules are typically simple and clear. But programs built on top of these rules tend to become complex enough to introduce their own rules and complexity. You’re building your own maze, in a way, and you might just get lost in it.There will be times at which reading this book feels terribly frustrating. If you are new to programming, there will be a lot of new material to digest. Much of this material will then be combined in ways that require you to make additional connections.It is up to you to make the effort necessary. When you are struggling to follow the book, do not jump to any conclusions about your own capabilities. You are fine—you just need to keep at it. Take a break, reread some material, and always make sure you read and understand the example programs and exercises. Learning is hard work, but everything you learn is yours and will make subsequent learning easier.2
The computer programmer is a creator of universes for which he [sic] alone is responsible. Universes of virtually unlimited complexity can be created in the form of computer programs.—Joseph Weizenbaum, Computer Power and Human ReasonA program is many things. It is a piece of text typed by a programmer, it is the directing force that makes the computer do what it does, it is data in the computer’s memory, yet it controls the actions performed on this same memory. Analogies that try to compare programs to objects we are familiar with tend to fall short. A superficially fitting one is that of a machine—lots of separate parts tend to be involved, and to make the whole thing tick, we have to consider the ways in which these parts interconnect and contribute to the operation of the whole.A computer is a machine built to act as a host for these immaterial machines. Computers themselves can do only stupidly straightforward things. The reason they are so useful is that they do these things at an incredibly high speed. A program can ingeniously combine enormous numbers of these simple actions in order to do very complicated things.To some of us, writing computer programs is a fascinating game. A program is a building of thought. It is costless to build, it is weightless, and it grows easily under our typing hands.But without care, a program’s size and complexity will grow out of control, confusing even the person who created it. Keeping programs under control is the main problem of programming. When a program works, it is beautiful. The art of programming is the skill of controlling complexity. The great program is subdued, made simple in its complex- ity.Many programmers believe that this complexity is best managed by using only a small set of well-understood techniques in their programs. They have composed strict rules (“best practices”) prescribing the form programs should have, and the more zealous among them will consider those who go outside of this safe little zone to be bad programmers.What hostility to the richness of programming—to try to reduce it to something straightforward and predictable, to place a taboo on all the weird and beautiful programs! The landscape of programming tech- niques is enormous, fascinating in its diversity, and still largely unex- plored. It is certainly dangerous going, luring the inexperienced pro-3
grammer into all kinds of confusion, but that only means you should proceed with caution and keep your wits about you. As you learn, there will always be new challenges and new territory to explore. Program- mers who refuse to keep exploring will stagnate, forget their joy, and get bored with their craft.Why language mattersIn the beginning, at the birth of computing, there were no programming languages. Programs looked something like this:00110001 00000000 00000000 00110001 00000001 00000001 00110011 00000001 00000010 01010001 00001011 00000010 00100010 00000010 00001000 01000011 00000001 00000000 01000001 00000001 00000001 00010000 00000010 00000000 01100010 00000000 00000000That is a program to add the numbers from 1 to 10 together and print outtheresult: 1+2+...+10=55. Itcouldrunonasimple,hypo- thetical machine. To program early computers, it was necessary to set large arrays of switches in the right position or punch holes in strips of cardboard and feed them to the computer. You can probably imagine how tedious and error-prone this procedure was. Even writing simple programs required much cleverness and discipline. Complex ones were nearly inconceivable.Of course, manually entering these arcane patterns of bits (the ones and zeros) did give the programmer a profound sense of being a mighty wizard. And that has to be worth something in terms of job satisfaction.Each line of the previous program contains a single instruction. It could be written in English like this:1. Store the number 0 in memory location 0.2. Store the number 1 in memory location 1.3. Store the value of memory location 1 in memory location 2. 4. Subtract the number 11 from the value in memory location 2.4
5. If the value in memory location 2 is the number 0, continue with instruction 9.6. Add the value of memory location 1 to memory location 0.7. Add the number 1 to the value of memory location 1.8. Continue with instruction 3.9. Output the value of memory location 0.Although that is already more readable than the soup of bits, it is still rather unpleasant. It might help to use names instead of numbers for the instructions and memory locations.Set ``''total to 0.Set ``''count to 1. [loop]Set ``''compare to ``''count.Subtract 11 from ``''compare.If ``''compare is zero, continue at [end]. Add ``''count to ``''total.Add 1 to ``''count.Continue at [loop].[end]Output ``''total.Can you see how the program works at this point? The first two lines give two memory locations their starting values: total will be used to build up the result of the computation, and count will keep track of the number that we are currently looking at. The lines using compare are probably the weirdest ones. The program wants to see whether count is equal to 11 in order to decide whether it can stop running. Because our hypothetical machine is rather primitive, it can only test whether a number is zero and make a decision (or jump) based on that. So, it uses the memory location labeled compare to compute the value of count - 11 and makes a decision based on that value. The next two lines add the value of count to the result and increment count by 1 every time the program has decided that count is not 11 yet.Here is the same program in JavaScript:var total = 0, count = 1; while (count <= 10) {total += count; count += 1;5
} console.log(total); // → 55This version gives us a few more improvements. Most importantly, there is no need to specify the way we want the program to jump back and forth anymore. The while language construct takes care of that. It continues executing the block (wrapped in braces) below it as long as the condition it was given holds. That condition is count <= 10, which means “count is less than or equal to 10”. We no longer have to create a temporary value and compare that to zero, which was an uninteresting detail. Part of the power of programming languages is that they take care of uninteresting details for us.At the end of the program, after the while has finished, the console.log operation is applied to the result in order to write it as output.Finally, here is what the program could look like if we happened to have the convenient operations range and sum available, which respectively create a collection of numbers within a range and compute the sum of a collection of numbers:console.log(sum(range(1, 10))); // → 55The moral of this story is that the same program can be expressed in long and short, unreadable and readable ways. The first version of the program was extremely obscure, whereas this last one is almost English: log the sum of the range of numbers from 1 to 10. (We will see in later chapters how to build operations like sum and range.)A good programming language helps the programmer by allowing them to talk about the actions that the computer has to perform on a higher level. It helps omit uninteresting details, provides convenient building blocks (such as while and console.log), allows you to define your own building blocks (such as sum and range), and makes those blocks easy to compose.6
What is JavaScript?JavaScript was introduced in 1995 as a way to add programs to web pages in the Netscape Navigator browser. The language has since been adopted by all other major graphical web browsers. It has made modern web applications possible, applications with which you can interact directly, without doing a page reload for every action. But it is also used in more traditional websites to provide various forms of interactivity and cleverness.It is important to note that JavaScript has almost nothing to do with the programming language named Java. The similar name was in- spired by marketing considerations, rather than good judgment. When JavaScript was being introduced, the Java language was being heavily marketed and was gaining in popularity. Someone thought it a good idea to try to ride along on this success. Now we are stuck with the name.After its adoption outside of Netscape, a standard document was writ- ten to describe the way the JavaScript language should work to make sure the various pieces of software that claimed to support JavaScript were actually talking about the same language. This is called the EC- MAScript standard, after the Ecma International organization that did the standardization. In practice, the terms ECMAScript and JavaScript can be used interchangeably—they are two names for the same language.There are those who will say terrible things about the JavaScript lan- guage. Many of these things are true. When I was required to write something in JavaScript for the first time, I quickly came to despise it. It would accept almost anything I typed but interpret it in a way that was completely different from what I meant. This had a lot to do with the fact that I did not have a clue what I was doing, of course, but there is a real issue here: JavaScript is ridiculously liberal in what it allows. The idea behind this design was that it would make programming in JavaScript easier for beginners. In actuality, it mostly makes finding problems in your programs harder because the system will not point them out to you.This flexibility also has its advantages, though. It leaves space for a lot of techniques that are impossible in more rigid languages, and as you will see, for example, in Chapter 10, it can be used to overcome some7
of JavaScript’s shortcomings. After learning the language properly and working with it for a while, I have learned to actually like JavaScript.There have been several versions of JavaScript. ECMAScript version 3 was the dominant, widely supported version in the time of JavaScript’s ascent to dominance, roughly between 2000 and 2010. During this time, work was underway on an ambitious version 4, which planned a number of radical improvements and extensions to the language. Changing a living, widely used language in such a radical way turned out to be politically difficult, and work on the fourth edition was abandoned in 2008, leading to the much less ambitious fifth edition coming out in 2009. We’re now at the point where all major browsers support this fifth edition, which is the language version that this book will be focusing on. A sixth edition is in the process of being finalized, and some browsers are starting to support new features from this edition.Web browsers are not the only platforms on which JavaScript is used. Some databases, such as MongoDB and CouchDB, use JavaScript as their scripting and query language. Several platforms for desktop and server programming, most notably the Node.js project, the subject of Chapter 20, are providing a powerful environment for programming JavaScript outside of the browser.Code, and what to do with itCode is the text that makes up programs. Most chapters in this book contain quite a lot of it. In my experience, reading code and writing code are indispensable parts of learning to program, so try to not just glance over the examples. Read them attentively and understand them. This may be slow and confusing at first, but I promise that you will quickly get the hang of it. The same goes for the exercises. Don’t assume you understand them until you’ve actually written a working solution.I recommend you try your solutions to exercises in an actual JavaScript interpreter. That way, you’ll get immediate feedback on whether what you are doing is working, and, I hope, you’ll be tempted to experiment and go beyond the exercises.The easiest way to run the example code in the book, and to ex- periment with it, is to look it up in the online version of the book at8
eloquentjavascript.net. There you can click any code example to edit and run it and to see the output it produces. To work on the exercises, go to eloquentjavascript.net/code, which provides starting code for each coding exercise and allows you to look at the solutions.If you want to run the programs defined in this book outside of the book’s sandbox, some care is required. Many examples stand on their own and should work in any JavaScript environment. But code in later chapters is mostly written for a specific environment (the browser or Node.js) and can run only there. In addition, many chapters define bigger programs, and the pieces of code that appear in them depend on each other or on external files. The sandbox on the website provides links to zip files containing all of the scripts and data files necessary to run the code for a given chapter.Overview of this bookThis book contains roughly three parts. The first 11 chapters discuss the JavaScript language itself. The next eight chapters are about web browsers and the way JavaScript is used to program them. Finally, two chapters are devoted to Node.js, another environment to program JavaScript in.Throughout the book, there are five project chapters, which describe larger example programs to give you a taste of real programming. In order of appearance, we will work through building an artificial life sim- ulation, a programming language, a platform game, a paint program, and a dynamic website.The language part of the book starts with four chapters to introduce the basic structure of the JavaScript language. They introduce control structures (such as the while word you saw in this introduction), functions (writing your own operations), and data structures. After these, you will be able to write simple programs. Next, Chapters 5 and 6 introduce techniques to use functions and objects to write more abstract code and thus keep complexity under control.After a first project chapter, the first part of the book continues with chapters on error handling and fixing, on regular expressions (an im- portant tool for working with text data), and on modularity—another9
weapon against complexity. The second project chapter concludes the first part of the book.The second part, Chapters 12 to 19, describes the tools that browser JavaScript has access to. You’ll learn to display things on the screen (Chapters 13 and 16), respond to user input (Chapters 14 and 18), and communicate over the network (Chapter 17). There are again two project chapters in this part.After that, Chapter 20 describes Node.js, and Chapter 21 builds a simple web system using that tool.Typographic conventionsIn this book, text written in a monospaced font should be understood to represent elements of programs—sometimes they are self-sufficient fragments, and sometimes they just refer to part of a nearby program. Programs (of which you have already seen a few), are written as follows:function fac(n) { if (n == 0)return 1; elsereturn fac(n - 1) * n; }Sometimes, in order to show the output that a program produces, the expected output is written after it, with two slashes and an arrow in front.console.log(fac(8)); // → 40320Good luck!10
